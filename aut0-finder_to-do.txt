

https://auto-finder.onrender.com


BTW, once we have got his working for cars, I'd like to expand out the same concept but for properties scraping property sites (e.g. myhome.ie, daft.ie, etc) and comparing against user preferences (location, price range, etc)


>>>>>>

I don't want this app to get blocked for doing too much scraping and it is not urgent - we can slowly build up the DB, so please make sure we are not being too aggressive and we can ramp it up later

I didn't think that the free tier was the constraint, I thoguht that the frequncy of scraping an external site coud cause a red flag and that is why I asked you to throttle it - do you not think that is neccessary?

No how do we make sure this works, scraping a little bi every day on the free tier since it goes asleep?


>>>>>>>>


Used Car Deal Tracker — Business Logic Overview

🎯 Goal

To automate the daily tracking, filtering, scoring, and alerting of second-hand car listings from multiple Irish websites, surfacing only the best-value deals within user-defined preferences.


🔍 Key User Requirements

must be a Modern, Multitenanted, Autenticated, Modular, Object-Orientated Flask/React app

Only show cars within a set price range (variable set by the user - default to €5k–€15k)

Must be located within a specific geographic regios set by the user (default to Leinster)

Exclude a dynamic list of blacklisted car models (set by user on the fly)

Show only de-duplicated listings across all used-car sales platforms and garage websites

Detect price drops and changes in listing status

Calculate a Deal Score for every listing using user-defined weights 

Send a daily email summary with a scrape overview and top 20 listings with links into the app

Display all results in a dashboard

scrape daily

Be fully automated and block-resistant




📚 Input Sources
1. Used Car Websites

 Carzone.ie

 DoneDeal.ie

 Adverts.ie

 CarsIreland.ie

2. Used Car Garage websites
Lewismotors.ie

3. User-Defined Variables

Settings: Price range, max pages, min deal score, site toggles

Blacklist: Car model keywords to ignore

Locations: Whitelisted counties 

Weights: Deal scoring configuration



🧠 Core Logic Flow

1. Per-Site Scraping

Each site is scraped using:

undetected-chromedriver with user-agent rotation

Retry with exponential backoff

Per-site HTML parsing logic

Configurable page limits


2. Initial Filtering

For each listing:

Parse: title, price, location, url, image, date

Exclude if:

Price not in [min_price, max_price]

Location not in approved_locations

Title matches blacklisted model



3. Duplicate Detection

Across all platforms:

Compare listings using:

Title similarity (SequenceMatcher)

Price difference within ±€50

image hash match

Flag Is Duplicate = Yes if similar and group all together into one listing in this app with multiple links t the platforms / websites


4. Listing History Tracking

Match against existing master DB entries by URL:

If new → mark First Seen Date

If seen before → update Last Seen Date

If previously seen but not in today’s scrape → mark Status = removed

Track Previous Price and Price Dropped = Yes/No


📊 Deal Scoring Logic

weights must total 100

Each listing is scored on:

Criterion	Description
Price vs Market Value	Lower price = higher score
Mileage vs Year	Newer + lower mileage = higher
CO2/Tax Band	Lower tax = higher
Popularity / Rarity	Less common model = higher
Price Dropped?	Score bonus if dropped recently
Location Match	Score bonus for Leinster-only
Listing Freshness	Newer listing = higher score

The result is a Deal Score (0–100).


📬 Email Alerts Logic

At end of scrape, filter listings with Deal Score >= X (from settings)

Take top 20 by score

Build and send one email per day

Fixed subject: "New Matching Used Car Deals [Auto Tracker]"

Includes:

Summary (total listings scraped, per-site breakdown, blocks)

List of top 20: Title, Price, Deal Score, Link



Dashboard includes:

Filters for price, score, make, location, status

Trendlines for new listings per day

Table of all active listings

Charts for average deal score by site, price bracket, fuel type, etc.



☁️ Deployment & Automation

Hosted on Netlify 

Daily scheduled runs



Logs and errors written to Logs


🛡 Anti-Blocking Features

undetected-chromedriver

Headless browser emulation

User-agent rotation (fake-useragent)

Randomised delays between requests

Retry logic with exponential backoff

Captcha/redirect detection → flag as "Blocked"


🔄 Extensibility

Easily add:

More sites (same format)

More filters (e.g. NCT expiry)

More scoring criteria 

Whatsapp alerts

API layer for programmatic access

