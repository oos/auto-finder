# Optimized Dockerfile for Render free tier
FROM node:18-alpine AS frontend-build

# Build React frontend
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY src/ ./src/
COPY public/ ./public/
RUN npm run build

# Python backend stage
FROM python:3.11-slim

# Install system dependencies (minimal for free tier)
RUN apt-get update && apt-get install -y \
    wget \
    gnupg \
    unzip \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Chrome and ChromeDriver (lightweight)
RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
    && echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list \
    && apt-get update \
    && apt-get install -y google-chrome-stable \
    && rm -rf /var/lib/apt/lists/*

# Install ChromeDriver
RUN CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | cut -d'.' -f1-3) \
    && CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}") \
    && wget -O /tmp/chromedriver.zip "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip" \
    && unzip /tmp/chromedriver.zip -d /usr/local/bin/ \
    && chmod +x /usr/local/bin/chromedriver \
    && rm /tmp/chromedriver.zip

# Set up Python environment
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy backend code
COPY app.py .
COPY models.py .
COPY scraping_engine.py .
COPY email_service.py .
COPY celery_app.py .
COPY logging_config.py .
COPY routes/ ./routes/
COPY migrations/ ./migrations/

# Copy built frontend
COPY --from=frontend-build /app/build ./build

# Create logs directory
RUN mkdir -p logs

# Expose port (Render uses PORT environment variable)
EXPOSE $PORT

# Start script optimized for Render
COPY start-render.sh .
RUN chmod +x start-render.sh

CMD ["./start-render.sh"]
